1) git checkout <file_name> - в одном файле
   git checkout  - во всех файлах
2) git restore --staged <file_name>
3) git reset HEAD~1 - вернуться назад, на 1 коммит. 
4) git branch <branch_name>, git checkout -b <branch_name> - создать ветку
   git checkout <branch_name> - переключиться на другую ветку  
5) если коммит сливается с тем, 
до которого можно добраться двигаясь по истории прямо, 
Git упрощает слияние просто перенося указатель ветки вперед,
так как нет расхождений в изменениях. Это называется «fast-forward».

Иначе, если коммит, на котором мы находимся, не является прямым родителем
ветки, с которой мы выполняем слияние, то в этом случае выполняется 
простое трёхстороннее слияние, используя последние коммиты объединяемых
 веток и общего для них родительского коммита. Это называется «non-fast-forward».

6) Конфликт возникает при слиянии веток, а именно, когда есть различия в изменениях файлов.
Пример (взят из интернета)

<<<<<<< HEAD:index.html
<div id="footer">contact : email.support@github.com</div>
=======
<div id="footer">
 please contact us at support@github.com
</div>
>>>>>>> iss53:index.html

Лечится использованием инструмента слияния, и исправлением кода в проблемных местах
после этого исправления добавляются в индекс, и совершается коммит слияния
7) git branch -d <branch_name>  - локальное удаление
   git branch -D <branch_name>  - принудительное удаление
   git push <repo_name> -d <remote_branch_name> - удаление ветки на удалённом репозитории
   